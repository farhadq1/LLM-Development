def combined_tfidf_match(data_row, rulebook_df, field_weight=0.6, business_name_weight=0.2, description_weight=0.2, threshold=0.6):
    """
    Combines TF-IDF scores from field name, business name, and description to find the best match.

    Args:
        data_row: A row from the data_df DataFrame.
        rulebook_df: The rulebook DataFrame.
        field_weight: Weight for the field name TF-IDF score.
        business_name_weight: Weight for the business name TF-IDF score.
        description_weight: Weight for the description TF-IDF score.
        threshold: Minimum combined TF-IDF score to consider a match.

    Returns:
        The best matching rulebook element name, or None if no match exceeds the threshold.
    """

    vectorizer = TfidfVectorizer()

    # Combine text for each rulebook element
    rulebook_combined = rulebook_df['element_cleaned'].tolist()

    # Combine text from the data row
    data_combined = [data_row['field_cleaned'], data_row['business_name_cleaned'], data_row['description_cleaned']]

    # Fit and transform the combined text
    tfidf_matrix = vectorizer.fit_transform(rulebook_combined + data_combined)

    # Calculate cosine similarities for each component
    field_similarities = cosine_similarity(tfidf_matrix[-3], tfidf_matrix[:-3]).flatten()
    business_name_similarities = cosine_similarity(tfidf_matrix[-2], tfidf_matrix[:-3]).flatten()
    description_similarities = cosine_similarity(tfidf_matrix[-1], tfidf_matrix[:-3]).flatten()

    # Calculate the weighted combined score
    combined_scores = (field_weight * field_similarities +
                       business_name_weight * business_name_similarities +
                       description_weight * description_similarities)

    best_match_index = combined_scores.argmax()
    best_match_score = combined_scores[best_match_index]

    if best_match_score >= threshold:
        return rulebook_df.iloc[best_match_index]['element_name']
    else:
        return None

# Apply the combined matching function
data_df['best_match'] = data_df.apply(lambda row: combined_tfidf_match(row, rulebook_df), axis=1)

print(data_df[['field_name', 'business_name', 'business_description', 'best_match']])
